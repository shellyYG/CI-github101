name: 'Terraform CI (Deploy)'

on:
  push:
    branches:
      - main
      - dev
      - staging
  pull_request:
    branches:
      - main
      - dev
      - staging

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform CLI on the runner
      uses: hashicorp/setup-terraform@v1

    - name: Debug
      run: |
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event: ${{ github.event_name }}"

    - name: Determine Environment
      id: vars
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "Current branch is main"
          echo "##[set-output name=env;]production"
        elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "Current branch is dev"
          echo "##[set-output name=env;]dev"
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "Current branch is staging"
          echo "##[set-output name=env;]staging"
        else
          echo "Not a deployable branch"
          echo "##[set-output name=env;]none"
        fi

    - name: Terraform Plan after PR opened (before merged)
      if: github.event_name == 'pull_request'
      run: |
        cd environments/${{ steps.vars.outputs.env }}
        terraform init
        terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Apply after PR merged
      if: github.event_name == 'push' && steps.vars.outputs.env != 'none'
      run: |
        cd environments/${{ steps.vars.outputs.env }}
        terraform init
        terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}