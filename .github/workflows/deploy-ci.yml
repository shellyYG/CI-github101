name: 'Terraform CI (Deploy)'

on:
  push:
    branches:
      - main
      - dev
      - staging
  pull_request:
    branches:
      - main
      - dev
      - staging

jobs:
  deploy-docker:
    name: 'deploy-docker'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.15'

    - name: Check branch name
      run: |
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event: ${{ github.event_name }}"

    - name: Determine Environment
      id: vars
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
          echo "Current push branch / Current target branch to merge is: main"
          echo "##[set-output name=project;]terraform-github-actions"
        elif [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.event.pull_request.base.ref }}" == "dev" ]]; then
          echo "Current push branch / Current target branch to merge is: dev"
          echo "##[set-output name=project;]terraform-github-actions"
        elif [[ "${{ github.ref }}" == "refs/heads/staging" || "${{ github.event.pull_request.base.ref }}" == "staging" ]]; then
          echo "Current push branch / Current target branch to merge is: staging"
          echo "##[set-output name=project;]terraform-github-actions"
        else
          echo "Not a deployable branch"
          echo "##[set-output name=project;]none"
        fi

    - name: Check project ID
      run: |
        echo "Project ID: ${{ steps.vars.outputs.project }}"

    - name: Setup Google Cloud CLI way 1
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    - name: Setup Google Cloud CLI way 2
      id: auth2
      if: steps.vars.outputs.project != 'none'
      run: |
        echo '${{ secrets.GOOGLE_CREDENTIALS }}' > gcp-key.json
        gcloud auth activate-service-account --key-file=gcp-key.json
        gcloud config set project ${{ env.GCP_PROJECT }}
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        GCP_PROJECT: ${{ steps.vars.outputs.project }}

  terraform-ci:
    name: 'deploy-terraform'
    runs-on: ubuntu-latest
    needs: deploy-docker

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform CLI on the runner
      uses: hashicorp/setup-terraform@v1

    - name: Debug
      run: |
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event: ${{ github.event_name }}"

    - name: Determine Environment
      id: vars
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.pull_request.base.ref }}" == "main" ]]; then
          echo "Current push branch / Current target branch to merge is: main"
          echo "##[set-output name=env;]production"
        elif [[ "${{ github.ref }}" == "refs/heads/dev" || "${{ github.event.pull_request.base.ref }}" == "dev" ]]; then
          echo "Current push branch / Current target branch to merge is: dev"
          echo "##[set-output name=env;]dev"
        elif [[ "${{ github.ref }}" == "refs/heads/staging" || "${{ github.event.pull_request.base.ref }}" == "staging" ]]; then
          echo "Current push branch / Current target branch to merge is: staging"
          echo "##[set-output name=env;]staging"
        else
          echo "Not a deployable branch"
          echo "##[set-output name=env;]none"
        fi

    - name: Terraform Plan after PR opened (before merged)
      if: github.event_name == 'pull_request'
      run: |
        cd environments/${{ steps.vars.outputs.env }}
        terraform init
        terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    - name: Terraform Apply after PR merged
      if: github.event_name == 'push' && steps.vars.outputs.env != 'none'
      run: |
        cd environments/${{ steps.vars.outputs.env }}
        terraform init
        terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}